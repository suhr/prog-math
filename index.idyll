[meta title:"Теория множеств" /]

[Header
  fullWidth:true
  title:"Теория множеств"
/]

Множество (неформально) — неупорядоченный набор различных элементов. Например:

[Equation display: true]Suit = \{♡, ♢, ♣, ♠\}[/Equation]

[Equation display: true]ℕ = \{0, 1, 2, 3, …\}[/Equation]

Множество (менее неформально) — сущность, определяемая бинарным отношением [Equation]elem ∈ Set[/Equation].

Например, множеству [Equation]Qhb = \{\mathtt{"Q"}, \mathtt{"H"}, \mathtt{"B"}\}[/Equation] соответствует следующее отношение:

```
"Q" ∈ Qhb истино
"H" ∈ Qhb истино
"B" ∈ Qhb истино
_   ∈ Qhb ложно
```

Множества равны, когда они содержат одни и те же элементы. Например, [Equation]\{1, 1, 1\}[/Equation] это то же самое, что и просто [Equation]\{1\}[/Equation]. Однако, [Equation]\{♡, ♠\} \neq \{♡\}[/Equation], так как второе множество не содержит [Equation]♠[/Equation].

Пустое множество не содержит элементов. Оно обозначается как [Equation]\varnothing[/Equation].

Множество элементов одного и того же типа как трейт:

```rust
// Реализация Eq для T должна соответствовать равенству множеств
trait Set<T> {
    fn contains(&self, elem: &T) -> bool;
}
```

[Aside]
[Equation]\in[/Equation] это не то же самое, что [Equation]\subseteq[/Equation].
Так, [Equation]\{2\} \subseteq \Bbb N[/Equation], но [Equation]\{2\} \notin \Bbb N[/Equation].
[/Aside]
Пусть даны два множества, [Equation]A[/Equation] и [Equation]B[/Equation]. Мы говорим,
что [Equation]A[/Equation] является подмножеством [Equation]B[/Equation] (пишем [Equation]A ⊆ B[/Equation]),
если [Equation]B[/Equation] содержит все элементы множества [Equation]A[/Equation].
Например, [Equation]\{2, 3, 5\} ⊆ \Bbb N[/Equation].

Множество [Equation]A[/Equation] называется строгим подмножеством [Equation]B[/Equation] (пишем [Equation]A \subset B[/Equation]),
если [Equation]A \subseteq B[/Equation] и [Equation]A ≠ B[/Equation].

Отметим, что

[Equation display:true]A \subseteq B \mathrel\mathrm{and} B \subseteq A \iff A = B[/Equation]

## Базовые операции над множествами

### Схема построения

Мы можем построить подмножество всех тех элементов из [Equation]Set[/Equation], что удволетворяют
предикату [Equation]Pred[/Equation]:

[Equation display:true]\{var \in Set \mid Pred(var)\}[/Equation]

Например, натуральные числа до трёх включительно: [Equation]\{n \in \Bbb N \mid n \leqslant 3 \}[/Equation].

Более того, мы можем записать множество всех выражений, переменные [Equation]v_1, \dots, v_n[/Equation] в котором удволетворяют предикату:

[Equation display:true]\{expr \mid Pred(v_1, \dots, v_n)\}[/Equation]

Например: [Equation]\{x^2 \mid x \in \Bbb N \}[/Equation] — множество всех квадратов натуральных чисел.

Логические операции в математике те же, что и в программировании (modulo нотация):

[Equation display:true]
\begin{aligned}
False &\mathbin\mathrm{or} False = False \\
\_ &\mathbin\mathrm{or} \_ = True
\end{aligned}
\qquad
\begin{aligned}
True &\mathbin\mathrm{and} True = True \\
\_ &\mathbin\mathrm{and} \_ = False
\end{aligned}
[/Equation]

[Aside]
А именнно:

[ol]
[li]Нейтральный элемент[/li]
[li]Нулевой элемент[/li]
[li]Идемпотентность[/li]
[li]Коммутативность[/li]
[li]Aссоциативность[/li]
[/ol]
[/Aside]
Они обладают множеством полезных свойств:

[Equation display:true]
\begin{aligned}
P \mathbin\mathrm{or} False &= P\\
P \mathbin\mathrm{or} True &= True\\
P \mathbin\mathrm{or} P &= P \\
P \mathbin\mathrm{or} Q &= Q \mathbin\mathrm{or} P \\
(P \mathbin\mathrm{or} Q) \mathbin\mathrm{or} R &= P \mathbin\mathrm{or} (Q \mathbin\mathrm{or} R)
\end{aligned}
\qquad
\begin{aligned}
P \mathbin\mathrm{and} True &= P \\
P \mathbin\mathrm{and} False &= False\\
P \mathbin\mathrm{and} P &= P \\
P \mathbin\mathrm{and} Q &= Q \mathbin\mathrm{and} P \\
(P \mathbin\mathrm{and} Q) \mathbin\mathrm{and} R &= P \mathbin\mathrm{and} (Q \mathbin\mathrm{and} R)
\end{aligned}
[/Equation]

Кроме того:

[Aside]А это — дистрибутивность.[/Aside]
[Equation display:true]
P \mathbin\mathrm{and} (Q \mathbin\mathrm{or} R) = (P \mathbin\mathrm{and} Q) \mathbin\mathrm{or} (P \mathbin\mathrm{and} R)
[/Equation]

Отрицание превращает [Equation]\mathrm{or}[/Equation] в [Equation]\mathrm{and}[/Equation] и наоборот:

[Equation display:true]
\begin{aligned}
\operatorname{not}(P \mathbin\mathrm{or} Q) = (\operatorname{not} P) \mathbin\mathrm{and} (\operatorname{not} Q)\\
\operatorname{not}(P \mathbin\mathrm{and} Q) = (\operatorname{not} P) \mathbin\mathrm{or} (\operatorname{not} Q)
\end{aligned}
[/Equation]

### Объединение

Объединение множеств [Equation]A[/Equation] и [Equation]B[/Equation] (пишем [Equation]A \cup B[/Equation])
это множество, которое содержит те и только те элементы, что принадлежат множеству
[Equation]A[/Equation] или пренадлежат множеству [Equation]B[/Equation].

Символьно, это можно записать так:

[Equation display:true](\forall e) \enspace e \in A \cup B \iff e \in A \mathbin\mathrm{or} e \in B[/Equation]

Графически, это изображают вот так:

[img src:"https://upload.wikimedia.org/wikipedia/commons/thumb/3/30/Venn0111.svg/1280px-Venn0111.svg.png" height:300 /][br /]

Пример объединения:

[Equation display:true]\{2, 3, 5\} \cup \{2, 4, 8\} = \{2, 3, 4, 5, 8\}[/Equation]

Если [Equation]A \subseteq B[/Equation], то [Equation]A \cup B = B[/Equation].
В частности, [Equation]\varnothing \cup B = B[/Equation].

Кроме того,

[Equation display: true]
\begin{aligned}
(A \cup B) \cup C &= A \cup (B \cup C) \\
A \cup B &= B \cup A
\end{aligned}
[/Equation]

### Пересечение

Пересечение множеств [Equation]A[/Equation] и [Equation]B[/Equation] (пишем [Equation]A \cap B[/Equation]) это множество, которое содержит те и только те элементы, что принадлежат одновременно и множеству [Equation]A[/Equation], и множеству [Equation]B[/Equation].

Символьно:

[Equation display:true](\forall e)\enspace e \in A \cap B \iff e \in A \mathbin\mathrm{and} e \in B[/Equation]

Графически:

[img src:"https://upload.wikimedia.org/wikipedia/commons/thumb/9/99/Venn0001.svg/1280px-Venn0001.svg.png" height:300 /][br /]

Пример пересечения:

[Equation display:true]\{2, 3, 5\} \cap \{2, 4, 8\} = \{2\}[/Equation]

Если [Equation]A \subseteq B[/Equation], то [Equation]A \cap B = A[/Equation]. В частности, [Equation]\varnothing \cap B = \varnothing[/Equation].

Так же, как и в случае с объединением множеств:
[Equation display: true]
\begin{aligned}
(A \cap B) \cap C &= A \cap (B \cap C)\\
A \cap B &= B \cap A
\end{aligned}
[/Equation]

Но кроме того:

[Equation display:true]
A \cap (B \cup C) = (A \cap B) \cup (A \cap C)
[/Equation]

Доказывается просто:

[Equation display:true]
\begin{aligned}
(\forall e)\enspace &e \in A \cap (B \cup C) \iff \\
&e \in A \mathbin\mathrm{and} (e \in B \mathbin\mathrm{or} e \in C) \iff \\
&(e \in A \mathbin\mathrm{and} e \in B)  \mathbin\mathrm{or} (e \in A \mathbin\mathrm{and} e \in B) \iff \\
&e \in (A \cap B) \cup (A \cap C)
\end{aligned}
[/Equation]

### Разность

Разность множеств [Equation]A[/Equation] и [Equation]B[/Equation] (пишем [Equation]A \setminus B[/Equation])
это множество всех элементов множества [Equation]A[/Equation], что не входят в множество [Equation]B[/Equation].

Символьно:

[Equation display:true](\forall e)\enspace e \in A \setminus B \iff e \in A \mathbin\mathrm{and} e \notin B[/Equation]

Графически:

[img src:"https://upload.wikimedia.org/wikipedia/commons/thumb/e/e6/Venn0100.svg/1280px-Venn0100.svg.png" height:300 /][br /]

Пример:

[Equation display:true]\{2, 3, 5\} \setminus \{2, 4, 8\} = \{3, 5\}[/Equation]

Пусть у нас есть некое множество [Equation]U[/Equation], которое содержит все интересущие нас объекты.
Определим операцию *дополнения* множества [Equation]A \subseteq U[/Equation]:

[Equation display:true]A^\mathrm{c} = U \setminus A[/Equation]

Графически:

[img src:"https://upload.wikimedia.org/wikipedia/commons/thumb/7/73/Venn10.svg/1024px-Venn10.svg.png" height:300 /][br /]

Для любых [Equation]A, B \subseteq U[/Equation] верно:

[Equation display:true]
\begin{aligned}
A \setminus B &= A \cap B^\mathrm{c} \\
(A \cup B)^\mathrm{c} &= A^\mathrm{c} \cap B^\mathrm{c} \\
(A \cap B)^\mathrm{c} &= A^\mathrm{c} \cup B^\mathrm{c}
\end{aligned}
[/Equation]

### Декартово произведение

Упорядоченная пара из элементов [Equation]a[/Equation] и [Equation]b[/Equation] аналогична кортежу
в программировании и обозначается [Equation](a, b)[/Equation].

Декартово произведение множеств [Equation]A[/Equation] и [Equation]B[/Equation]
(пишем [Equation]A \times B[/Equation]) это такое множество:

[Equation display:true]
A \times B = \{(a, b) \mid a \in A \mathbin\mathrm{and} b \in B\}
[/Equation]

Например, [Equation]\{2, \dots, 10, J, Q, K, A\} \times \{♠, ♡, ♣, ♢\}[/Equation] это множество

[FullWidth]
[img src:"https://upload.wikimedia.org/wikipedia/commons/0/02/Piatnikcards.jpg" height:600 /][br /]
[/FullWidth]

Или чуть более формально: [Equation]\{(2, ♠), (2, ♡), \dots\}[/Equation].

Декартово произведение дистрибутивно относительно остальных операций со множествами:

[Equation display:true]
\begin{aligned}
A \times (B \cup C) &= (A \times B) \cup (A \times C) \\
A \times (B \cap C) &= (A \times B) \cap (A \times C)
\end{aligned}
[/Equation]

### Булева алгебра как операции над множествами

Определим множества:

[Equation display: true]
False = \varnothing \qquad True = \{\varnothing\}
[/Equation]

[Aside]
Если бы мы выбрали [Equation]False = \{\varnothing\},\ True = \varnothing[/Equation],
то тогда «или» стало бы пересечением, а «и» — объединением.
[/Aside]
С их помощью, мы можем записать логические операции как операции над множествами:

[Equation display: true]
\begin{aligned}
P \mathbin\mathrm{or} Q &\longleftrightarrow P \cup Q \\
P \mathbin\mathrm{and} Q &\longleftrightarrow P \cap Q \\
\operatorname{not} P &\longleftrightarrow True \setminus P
\end{aligned}
[/Equation]

В математике, логические выражения [Equation]P \mathbin\mathrm{or} Q[/Equation]
и [Equation]P \mathbin\mathrm{and} Q[/Equation] записывают как [Equation]P \lor Q[/Equation]
и [Equation]P \land Q[/Equation].

## Множество в `std`: `HashSet`

Тип `HashMap<T, ()>` можно рассматривать как множество элементов типа `T`. Действительно:

```rust
/// Хешмапы равны, когда они содержат одни и те же ключи.
/// Поэтому, равенство определено корректно.
impl<T: Hash + Eq> Set<T> for HashMap<T, ()> {
    fn contains(&self, elem: &T) -> bool {
        self.contains_key(elem)
    }
}
```

В `std::collections` есть специализированная версия этого типа: `HashSet<T>`. Этот тип поддерживает
все базовые операции с множествами:

- `contains` (содержит, [Equation]e \in S[/Equation])
- `is_subset` (подмножество, [Equation]A \subseteq B[/Equation])
- `is_superset` (надмножество, [Equation]A \supseteq B[/Equation])
- `union` (объединение, [Equation]A \cup B[/Equation])
- `intersection` (пересечение, [Equation]A \cap B[/Equation])
- `difference` (разность, [Equation]A \setminus B[/Equation])

Кроме того, он поддерживает операцию симметрической разницы (`symmetric_difference`), которую можно
определить следующим образом:

[Equation display:true]A \mathbin\triangle B = (A \cup B) \setminus (A \cap B)[/Equation]

Она соответствует логической операции [Equation]\mathrm{xor}[/Equation]. Графически, её можно
описать так:

[img src:"https://upload.wikimedia.org/wikipedia/commons/thumb/4/46/Venn0110.svg/1280px-Venn0110.svg.png" height:300 /][br /]

## Характеристическая функция

Скобка Айверсона определяется следующим образом

[Equation display: true]
[P] = \begin{cases}
1,\ P\ \text{истино}\\
0,\ P\ \text{ложно}
\end{cases}
[/Equation]

С её помощью можно выразить логические операции как операции над числами:

[Equation display: true]
\begin{aligned}
[P \mathbin\mathrm{or} Q] &= \max([P], [Q]) \\
[P \mathbin\mathrm{and} Q] &= \min([P], [Q]) \\
[\operatorname{not} P] &= 1 - [P]
\end{aligned}
[/Equation]

Пусть есть некое множество [Equation]U[/Equation]. Для любого [Equation]A \subseteq U[/Equation],
можно определить функцию [Equation]\chi(e) = [e \in S][/Equation]. Эта функция называется характеристической
функцией множества [Equation]A[/Equation].

Любое подмножество [Equation]U[/Equation] определяет некую характеристическую функцию на [Equation]U[/Equation],
а из характеристической функции подмножества мы легко можем восстановить само подмножество:

[Equation display: true]
A = \{x \in U \mid \chi(x) = 1\}
[/Equation]

Поэтому, характеристическая функция является представлением множества, аналогично тому, как столбец
чисел является представлением вектора.

Характеристическая функции для основных операций над множествами:

[Equation display: true]
\begin{aligned}
[e \in A \cup B] &= \max([e \in A], [e \in B]) \\
[e \in A \cap B] &= \min([e \in A], [e \in B]) \\
[e \in A \setminus B] &= [e \in A \cup B] - [e \in B]
\end{aligned}
[/Equation]

В случае конечного набора фиксированных элементов, в качестве характеристической функции можно использовать
последовательнось битов. Поэтому, битовая карта является представлением некоторого множества:

```rust
#[derive(Clone, Copy, PartialEq)]
enum Element {
    First = 1 << 0,
    Second = 1 << 1,
    Third = 1 << 2,
}

#[derive(Clone, Copy, PartialEq)]
struct Bitmap(u8);

impl Set<Element> for Bitmap {
    fn containts(&self, elem: &Element) -> bool {
        self.0 & *elem as u8 != 0
    }
}

impl Bitmap {
    fn empty() -> Self {
        Bitmap(0)
    }

    fn new(elem: Element) -> Self {
        Bitmap(elem as u8)
    }

    fn union(self, other: Bitmap) -> Bitmap {
        Bitmap(self.0 | other.0)
    }

    fn intersection(self, other: Bitmap) -> Bitmap {
        Bitmap(self.0 & other.0)
    }

    fn difference(self, other: Bitmap) -> Bitmap {
        Bitmap(self.union(other).0 - other.0)
    }
}
```

## Функкции между множествами

Функция [Equation]f[/Equation] из множества [Equation]A[/Equation] в множество [Equation]B[/Equation]
(пишется [Equation]f : A \to B[/Equation]) это некоторая сущность, которая соотносит каждому элементу
множества [Equation]A[/Equation] единственный элемент множества [Equation]B[/Equation].

[Equation display:true](\forall x \in A)\ (\exists! y \in B)\enspace f(x) = y[/Equation]

Множество [Equation]A[/Equation] называется областью (доменом) функции [Equation]f[/Equation], когда
же множество [Equation]B[/Equation] называется кообластью (кодоменом). Обозначаются, соответственно,
как [Equation]\operatorname{dom} f[/Equation] и [Equation]\operatorname{cod} f[/Equation].

График функции [Equation]f[/Equation] это множество

[Equation display:true]\Gamma_f = \{(a, b) \mid a \in \operatorname{dom} f \mathbin\mathrm{and} f(a) = b\}[/Equation]

Две функции равны, если равны их области, кообласти и графики.

Множество всех функций из [Equation]A[/Equation] в [Equation]B[/Equation] обозначается
как [Equation]A \to B[/Equation] или [Equation]B^A[/Equation].

Образ множества [Equation]A[/Equation] при функции [Equation]f[/Equation] это следующее подмножество
её кообласти:

[Equation display:true]f[A] = \{f(x) \mid x \in A\}[/Equation]

Образ *функции* [Equation]f[/Equation] это образ области [Equation]f[/Equation].

Функция называется *инъективной*, если если из равенства значений следует равенство аргументов.

[Equation display:true]
(\forall x_1, x_2 \in \operatorname{dom} f)\enspace f(x_1) = f(x_2) \implies x_1 = x_2
[/Equation]

Иначе говоря, каждому значению функции соответствует единственный аргумент функции:

[img src:"https://mathworld.wolfram.com/images/eps-gif/Injection_1000.gif" /][br /]

Функция называется *сюръективной*, если её образ совпадает с её областью.

Графически, это может выглядеть так:

[img src:"https://mathworld.wolfram.com/images/eps-gif/Surjection_1000.gif" /][br /]

Функция называется *биективной*, если она инъекьтивна и сюръективна. Иначе говоря, она задаёт взаимно
однозначное соответствие между множествами:

[img src:"https://mathworld.wolfram.com/images/eps-gif/Bijection_1000.gif" /][br /]

Для биективной функции можно определить обратную функцию:

[Equation display:true]
(\forall x\in \operatorname{dom} f)\ (\forall y \in \operatorname{cod} f)\enspace f^{-1}(y) = x
[/Equation]

Очевидно, что каждой инъективной функции [Equation]f[/Equation] соответствует некоторая биективная
функция [Equation]\bar f[/Equation] из [Equation]\operatorname{dom} f[/Equation] в [Equation]\operatorname{im} f[/Equation]:

[Equation display:true]
(\forall x \in \operatorname{dom} f)\enspace\bar f(x) = f(x)
[/Equation]

Чуть менее очевидно, что каждой сюръективной функции также соответствует некоторая биективная функция.
А именно, определим *кообраз* функции [Equation]\operatorname{coim} f[/Equation], как некоторое
подмножество её области, такое, что

[Equation display:true]
\begin{aligned}
(\forall x_1, x_2 \in \operatorname{coim} f)\enspace &f(x_1) \neq f(x_2) \\
(\forall y \in \operatorname{cod} f)\ (\exists x \in \operatorname{coim} f)\enspace &y = f(x)
\end{aligned}
[/Equation]

Тогда существует биекция из [Equation]\operatorname{coim} f[/Equation] в [Equation]\operatorname{cod} f[/Equation]:

[Equation display:true]
(\forall x \in \operatorname{coim} f)\enspace\bar f(x) = f(x)
[/Equation]

Пусть [Equation]A, B \subseteq U[/Equation]. Образ множеств при любой функции сохраняет нестрогое
отношение подмножества:

[Equation display:true]
A \subseteq B \implies f[A] \subseteq f[B]
[/Equation]

Кроме того, образ объединения это объединение образов:

[Equation display:true]
F[A \cup B] = F[A] \cup F[B]
[/Equation]

Если же функция инъективная, то она сохраняет строгое отношение подмножества, а образ пересечения
является пересечением.

Показательное множество множества [Equation]A[/Equation] (пишем [Equation]\mathcal{P}(A)[/Equation]) это
множество всех подмножеств множества [Equation]A[/Equation].

Например

[Equation display:true]
\begin{aligned}
\mathcal{P}(\{1, 2, 3\}) = \{&\{\}, \\
&\{1\}, \{2\}, \{3\}, \\
&\{1, 2\},\{1, 3\}, \{2, 3\}, \\
&\{1, 2, 3\}\}
\end{aligned}
[/Equation]

**Предложение:** существует биекция между [Equation]\mathcal{P}(A)[/Equation] и множеством всех
функций из [Equation]A[/Equation] в [Equation]\{0, 1\}[/Equation].

Определим функцию [Equation]X : \mathcal{P}(A) \to (A \to \{0, 1\})[/Equation]:

[Equation display:true]
X(S) = (e \mapsto [e \in S])
[/Equation]

Она сюръективна: каждой функции [Equation]\chi \in (A \to \{0, 1\})[/Equation] соответствует
подмножество [Equation]\{e \in A \mid \chi(e) = 1\}[/Equation]. Она инъективна — это подмножество
единственно. Следовательно, она является биекцией.

## Отношение эквивалентности

Одно из ключевых понятий в математике — отношение эквивалентности.

Отношение [Equation]\sim[/Equation] на множестве [Equation]S[/Equation] называется отношением эквивалентности, если для
любых [Equation]a, b, c \in S[/Equation] верно:

- [Equation]a \sim a[/Equation] (рефлексивность)
- [Equation]a \sim b \implies b \sim a[/Equation] (симметричность)
- [Equation]a \sim b \mathbin\mathrm{and} b \sim c \implies a \sim c[/Equation] (транзитивность)

[Aside][img src:"https://images3.sw-cdn.net/product/picture/710x528_9200864_6240480_1512231364.jpg"/][/Aside]
Примеров эквивалентности можно привести много:

- Равенство, очевидно, является отношением эквивалентности
- Равенство геометрических фигур, как и их подобие
- Гомеоморфность
- Равенство ASCII строк без учёта регистра
- Равенство двух значений типа `Box<T>`
- AST, семантика кода

На самом деле, нас практически никогда не интересует истинное равенство вещей, только их эквивалентность.

Существование биекции между множествами это также отношение эквивалентности:

1. [Equation](\forall e \in A)\enspace id_A(e) = e[/Equation] это биекция
2. Обратная функция биекции это биекция
3. Композиция биекций [Equation]g \circ f = x \mapsto g(f(x))[/Equation] это биекция

Мы можем превратить эквивалентность в равенство с помощью классов эквивалентности.

Класс эквивалентности элемента [Equation]a \in S[/Equation] по отношению
эквивалентности [Equation]\sim[/Equation] это следующее подмножество множества [Equation]S[/Equation]:

[Equation display:true]
[a]_\sim = \{e \in S \mid e \sim a\}
[/Equation]

Фактор-множество [Equation]S/{\sim}[/Equation] это множество классов эквивалентности всех
элементов множества [Equation]S[/Equation].

**Предложение:** пусть [Equation][a]_\sim \neq [b]_\sim[/Equation].
Тогда [Equation][a]_\sim \cap [b]_\sim = \varnothing[/Equation].

Действительно, пусть [Equation]e \in [a]_\sim \cap [b]_\sim[/Equation]. Тогда для
любых [Equation]x \in[a]_\sim[/Equation] и [Equation]y \in [b]_\sim[/Equation]
верно [Equation]x \sim e \sim y[/Equation]
и классы содержат одни и те же элементы.

Так как классы эквивалентности не пересекаются, единственный элемент класса однозначно определяет
класс целиком. Мы можем рассмотреть некую функцию [Equation]\varphi : S \to S[/Equation], которая
отображает каждый элемент множества [Equation]S[/Equation] в некий единственный элемент
соответствующего класса эквивалентности:

[Equation display:true]
(\forall C \in S/{\sim})\ (\exists! c \in C)\ (\forall x \in C)\enspace \varphi(x) = c
[/Equation]

[Aside]Правда, не в математике. Математики просто используют функцию [Equation]\varphi : S \to S/{\sim}[/Equation][/Aside]
Применение подобной функции называется *нормализацией*.

Примеры нормализации:

- `to_lower`
- Сортировка
- Оптимизация запроса

Для любой функции [Equation]f[/Equation] можно определить отношение эквивалентности по равенству
результатов:

[Equation display:true]
(\forall x, y \in \operatorname{dom} f)\enspace x \sim_f y \iff f(x) = f(y)
[/Equation]

Это позволяет разложить функцию вот так:

[Equation display:true]
A \xtwoheadrightarrow{\enspace} A/{\sim_f} \xrightarrow{\tilde f} \operatorname{im} f \xhookrightarrow{\enspace} B
[/Equation]

Причём:

- Отображение каждого элемента множества [Equation]A[/Equation] в соответствующий класс эквивалентности является сюръекцией
- Функция [Equation]\tilde f[/Equation], сопоставляющая каждому [Equation][a]_{\sim_f}[/Equation] значение [Equation]f(a)[/Equation] является биекцией
- Тождественное преобразование из [Equation]\operatorname{im} f[/Equation] в [Equation]B[/Equation] является инъекцией

### Мощность

Множества [Equation]A[/Equation] и [Equation]B[/Equation] называются *равномощными*
(пишем [Equation]|A| = |B|[/Equation]), если между ними существует биекция.

Интуиция: мы сравниваем количество элементов сопоставляя их между собой. Например,
можно сопоставить множество [Equation]\{a, b, c\}[/Equation] с числами от нуля до двух:

[Equation display:true]
\begin{aligned}
a &\longleftrightarrow 0 \\
b &\longleftrightarrow 1 \\
c &\longleftrightarrow 2
\end{aligned}
[/Equation]

Кроме того, мы можем сравнивать множества по мощности:

[Equation display:true]
|A| \leqslant |B| \iff (\exists S \subseteq B)\enspace |A| = |S|
[/Equation]

В случае бесконечных множеств, понятие равномощности работает не совсем обычно: например, множество
квадратов натуральных чисел равномощно множеству всех натуральных чисел, хотя одно множество является
подмножеством другого.

Но в математике, мы не избегаем странностей, мы их принимаем.

[Aside]Собстенное подмножество — подмножество, не равное самому множеству.[/Aside]
Множество называется бесконечным, если оно равномощно некому своему собственному подмножеству.

**Предложение:** пусть [Equation]S[/Equation] это бесконечное множество.
Тогда [Equation]|S| \geqslant |\Bbb N|[/Equation].

[Aside]Утверждение, что такая функция всегда существует, называется *аксиомой выбора*.[/Aside]
Нам потребуется функция выбора [Equation]\varepsilon[/Equation], сопоставляющее каждому непустому
подмножеству множества [Equation]S[/Equation] единственный элемент этого подмножества:

[Equation display:true]
(\forall P \in \mathcal{P}(S) \setminus \{\varnothing\})\ (\exists! p \in P)\enspace \varepsilon(P) = p
[/Equation]

Пусть [Equation]f[/Equation] это отображение множества [Equation]S[/Equation] в его собственное
подмножество.

Рассмотрим цепь преобразований:

[Equation display:true]
S \xrightarrow{f} S_1 \xrightarrow{f} S_2 \xrightarrow{f} \dots
[/Equation]

Так как применение функции сохраняет отношение подмножества:

[Equation display:true]
S \subset S_1 \subset S_2 \subset \dots
[/Equation]

Так как функция биективна:

[Equation display:true]
S \setminus S_1 \xrightarrow{f} S_1 \setminus S_2 \xrightarrow{f} S_2 \setminus S_3 \xrightarrow{f} \dots
[/Equation]

Подмножества [Equation]S_{i} \setminus S_{i + 1}[/Equation] непусты и не пересекаются. Это позволяет
построить биекцию в [Equation]\Bbb N[/Equation]:

[Equation display:true]
\varphi(n) = f^n(\varepsilon(S \setminus S_1))
[/Equation]

**Пример:** пусть мы хотим построить отображение из натуральных чисел в целые. Нам дана функция

[Equation display:true]f(x) = 2 x[/Equation]

Соответствующая этой функции цепь подмножеств:

[Equation display:true]
\Bbb Z \subset 2 \Bbb Z \subset 4 \Bbb Z \subset \dots
[/Equation]

Выберем число из [Equation]\Bbb Z \setminus 2 \Bbb Z[/Equation], например, 3. Тогда

[Equation display:true]
\{\varphi(0) = 3\} \xrightarrow{f} \{\varphi(1) = 6\} \xrightarrow{f} \{\varphi(2) = 12\} \xrightarrow{f} \dots
[/Equation]

Таким образом, [Equation]\Bbb N[/Equation] это наименьшее из бесконечных множеств. А бывают ли *более*
мощные множества? Да — бывают.

**Предложение:** Для любого непустого множества [Equation]S[/Equation], [Equation]|\mathcal{P}(S)| > |S|[/Equation]
(строго мощнее).

Нам надо доказать, что не существует биекция из [Equation]S[/Equation] в [Equation]\mathcal{P}(S)[/Equation].
Предположим, что [Equation]f[/Equation] является такой биекцией. Определим множество

[Equation display:true]
D = \{s \in S \mid s \notin f(s)\}
[/Equation]

Пусть [Equation]d = f^{-1}(D)[/Equation]. Верно ли, что [Equation]d \in D[/Equation]?

- Положим, что принадлежит. Но тогда не может принадлежать, по определению [Equation]D[/Equation]
- Положим, что не принадлежит. Тогда должно принадлежать, по определению [Equation]D[/Equation]

Таким образом, имеем противоречие. А следовательно, такой биекции не существует.

Трюк, использованный в доказательсте этой теоремы называется *диагональным аргументом*. Почти так же
доказываются многие другие важные результаты, вроде:

- Несчётности вещественных чисел
- Проблема остановки и теорема Райса
- Теоремы о неполноте

Множества, равномощные [Equation]\Bbb N[/Equation] называются счётными, когда же множества строго
мощнее [Equation]\Bbb N[/Equation] называются несчётными.

## Аксиоматика

Не все коллекции элементов являются множеством.

**Предложение:** Не существует множества всех множеств.

[Aside]А можно было просто написать [Equation]\{s \mid s \notin s\}[/Equation].[/Aside]
Действительно, пусть [Equation]\mathcal V[/Equation] является таким множеством. Из теоремы о мощности
показательного множества, [Equation]|\mathcal{P}(\mathcal V)| > |\mathcal V|[/Equation]. Но в то же
время, [Equation]|\mathcal{P}(\mathcal V)| \leqslant |\mathcal V|[/Equation], так
как [Equation]\mathcal V[/Equation] это множество *всех* множеств. Противоречие.

Из этого результата есть два важных следствия:

1. Мы не можем говорить о всех множествах как о множестве. А хотелось бы!
2. Вообще непонятно, что можно считать множеством, а что — нет

Чтобы вернуть ясность и обрести право говорить за все множества, нам потребуются аксиомы и кое-какие
определения.

### Классы и множества

Все проблемы с коллекциями вроде коллеции всех множеств начинаются тогда, когда мы говорим о таких
коллекциях как об элементах какой-то другой коллекции. Но что если такие коллекции в принципе никому
не принадлежат?

Определения:

- *Класс* это сущность, для которой определено отношение [Equation]\in[/Equation]
- *Собственный класс* это класс, не являющийся членом какого-либо класса
- *Множество* это класс, не являющийся собственным

Мы избежали всех парадоксов теории множеств, просто назвав некоторые коллекции классами! Правда,
мы не сказали, существуют ли они вообще, и равны ли тогда, когда равны их элементы...

**Аксиома объёмности:** классы равны, когда равны их элементы.

[Equation display:true]
(\forall A)\ (\forall B)\ ((\forall e)\enspace e \in A \mathbin\mathrm{and} e \in B \implies A = B)
[/Equation]

Теоретико-множественная формула это логическая формула, использующая лишь логические символы,
переменные и отношения [Equation]\in[/Equation] и [Equation]=[/Equation].

**Аксиома построения классов:** для любой теоретико-множественной
формулы [Equation]\varphi(s)[/Equation] существует класс всех множеств [Equation]s[/Equation],
таких, что [Equation]\varphi(s)[/Equation] истино.

[Equation display:true]
(\exists C)\ (\forall s)\enspace s \in C \iff s\ \text{множество} \mathbin\mathrm{and} \varphi(s)
[/Equation]

Тонкий момент: здесь [Equation]\varphi(s)[/Equation] не может ссылаться на [Equation]C[/Equation].

Мы будем обозначать класс всех множеств как [Equation]\mathcal V[/Equation]. Пустой класс, как и
раньше, будем обозначать как [Equation]\varnothing[/Equation].

### Аксимомы для множеств

С помощью аксиомы посторения класов, мы можем сторить классы всех только мыслимых множеств... которых
нет. Ведь никто же не говорил, что множества существуют.

Будем строить множества снизу вверх.

**Аксиома пустого множества:** пустой класс это множество.

[Aside][Equation]\{x, y\} = \{e \mid e = x \mathbin\mathrm{or} e = y\}[/Equation][/Aside]
**Аксиома пары:** для любых [Equation]x, y \in \mathcal V[/Equation] класс [Equation]\{x, y\}[/Equation]
является множеством.

[Aside][Equation]\bigcup_{e \in s} e = \{x \mid (\exists e \in s)\enspace x \in e\}[/Equation][/Aside]
**Аксиома объединения:** для любого множества [Equation]s[/Equation], класс [Equation]\bigcup_{e \in S} e[/Equation]
является множеством.

[Aside][Equation]\mathcal{P}(s) = \{x \mid x \subseteq s\}[/Equation][/Aside]
**Аксиома множества подмножеств:** для любого множества [Equation]s[/Equation], класс [Equation]\mathcal{P}(S)[/Equation]
является множеством.

С помощью этих аксиом, мы можем определять сколь угодно большие конечные множества. Но чтобы вырваться
из конечного лимбо, нам нужно нечто большее...

**Аксиома бесконечности:** существует множество натуральных чисел.

Мы не можем определить натуральные числа через схему построения классов, так как логические формулы
конечны. Поэтому определим их рекурсивно:

[Equation display:true]
\begin{aligned}
0 &\in \Bbb N \\
(\forall n \in \Bbb N)\enspace S(n) &\in \Bbb N
\end{aligned}
\qquad
\begin{aligned}
0 &= \varnothing \\
S(n) &= n \cup \{n\}
\end{aligned}
[/Equation]

### Больше мощи

Наша система аксиом уже весьма выразительна. Но добавив ещё пару аксиом, мы можем сделать её намного
мощнее.

Но сначала надо определить упорядоченные пары и функции. Упорядоченная пара это множество:

[Equation display:true]
(a, b) = \{\{a\}, \{a, b\}\}
[/Equation]

Функции, достающие элемент из пары [Equation]p[/Equation], имеют вид:

[Aside]Здесь [Equation]\bigcup s = \bigcup_{e \in s} e[/Equation].[/Aside]
[Equation display:true]
\begin{aligned}
\pi_1(p) &= \bigcup\left(\bigcap u\right) \\
\pi_2(p) &= \bigcup\left\{x \in \textstyle\bigcup p \mid
x \notin \bigcap p \mathbin\mathrm{or}
\bigcap p = \bigcup p
\right\}
\end{aligned}
[/Equation]

С определением понятия функции немного сложнее:

- Функции между множествами определяем как тройку [Equation](\operatorname{dom} f, \operatorname{cod} f, \Gamma_f)[/Equation]
- Функции между собственными классами мы будем определять как их график. При этом мы теряем понятие кообласти

В первую очередь, нам хотелось бы получить функцию выбора для множеств, так как без неё даже наличие
счётного подмножества в бесконечном множестве доказать нельзя.

**Глобальная аксиома выбора:** существует аксиома выбора, определённая на классе всех непустых множеств.

[Aside]Например, [Equation]\bigcup_{n \in \Bbb N} \mathcal{P}^n(\Bbb N)[/Equation].[/Aside]
Наконец, аксиома, позволяющее существование *по настоящему больших множеств.*

**Аксиома подстановки:** Если область функции — множество, то и образ — множество.

Кроме больших множеств, эта аксиома позволяет нам просто использовать функции, не беспокоясь о
размере кообласти.

### Аксиома регулярности

Последняя аксиома позволяет избавится от множеств, содержащих себя как элемент, и прочих бесконечно
вложенных множеств.

**Аксиома регулярности:** в непустом множестве [Equation]a[/Equation] найдётся хотя бы один
элемент [Equation]e[/Equation], что [Equation]a \cap e = \varnothing[/Equation].

Вообще, множества, содержащие себя как элемент это не обязательно что-то плохое. Но среди математиков
принято считать, что бесконечно вложенные множества не нужны — и мы не будем ломать традицию.

## Ссылки

- J. Donald Monk, “Introduction to Set Theory”
